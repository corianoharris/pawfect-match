name: Accessibility Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1' # Run weekly on Mondays

jobs:
  a11y:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: pnpm run build

      - name: Start server
        run: pnpm start &

      - name: Wait for server
        run: pnpm dlx wait-on http://localhost:3000 -t 60000

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Run axe accessibility tests
        run: |
          export CHROME_BIN=/usr/bin/google-chrome
          # Use npm instead of pnpm for axe-core to avoid build script issues
          npm install -g @axe-core/cli
          axe http://localhost:3000 --exit --tags wcag2a,wcag2aa --stdout
          axe http://localhost:3000/dogs --exit --tags wcag2a,wcag2aa --stdout
          axe http://localhost:3000/details?id=dog1 --exit --tags wcag2a,wcag2aa --stdout

      - name: Stop server
        if: always()
        run: pkill -f "node" || true