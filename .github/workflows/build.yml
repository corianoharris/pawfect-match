name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build for'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
          - staging

jobs:
  build:
    name: Build Next.js Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ vars.NEXT_PUBLIC_API_BASE_URL }}
          NODE_ENV: ${{ github.event.inputs.environment || 'development' }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: next-build
          path: |
            .next
            public
            package.json
            next.config.mjs
          retention-days: 7

  test-build:
    name: Test Build
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: next-build
          path: .

      - name: Start server
        run: npm start &
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ vars.NEXT_PUBLIC_API_BASE_URL }}

      - name: Wait for server
        run: npx wait-on http://localhost:3000 -t 60000

      - name: Check if site is accessible
        run: curl -sSf http://localhost:3000 > /dev/null

      - name: Stop server
        if: always()
        run: pkill -f "node" || true

